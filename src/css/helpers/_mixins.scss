@mixin verticalGradient($top, $bottom){
    background: $top; /* Old browsers */
    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  $top 0%,$bottom 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%); /* IE10+ */
    background: linear-gradient(to bottom,  $top 0%,$bottom 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
}

// Rem output with px fallback
@mixin font-size($sizeValue: 1.6) {
	font-size: ($sizeValue * 10) + px;
	font-size: $sizeValue + rem;
}

// Box model
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model; // Safari <= 7
	-moz-box-sizing: $box-model; // Firefox <= 19
	box-sizing: $box-model;
}

// Border radius
@mixin border-radius($radius) {
	background-clip: padding-box; /* stops bg color from leaking outside the border: */
	-webkit-border-radius: $radius;
	border-radius: $radius;
}

// Center block
@mixin center-block {
	display: block;
	margin: 0 auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

//Vertical Align anything
@mixin vertical-align($position) {
	position: $position;
	top: 50%;
	transform: translateY(-50%);
}

@mixin vertical-align-table() {
	display: table-cell;
	vertical-align: middle;
}

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin noThumbnail(){
  background-color:transparent;
  border:none;
  padding:0px;
  border-radius: 0px;
  margin-bottom:0px;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}

@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
	     -o-transform-origin: $origin;
	    -ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
          transform-origin: $origin;
}

@mixin border-top(){
  border-top: 1px solid $color_11;
}

@mixin border-bottom(){
  border-bottom: 1px solid $color_11;
}

@mixin border-right(){
  border-right: 1px solid $color_11;
}

@mixin border-left(){
  border-left: 1px solid $color_11;
}

@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin transparent($color, $alpha) {
  $rgba: rgba($color, $alpha);
  $ie-hex-str: ie-hex-str($rgba);
  background-color: transparent;
  background-color: $rgba;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
  zoom: 1;
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

@mixin bgImageOverlay($color, $opacity : .4) {
    @include transition(all $trans_time);
    background-color: rgba($color, $opacity);
    height: 100%;
    width: 100%;
    position: absolute;
}

@mixin array13Gradient {
	background : -moz-linear-gradient(50% 0% -90deg,rgba(218, 150, 121, 1) 0%,rgba(204, 139, 111, 1) 18.47%,rgba(166, 108, 83, 1) 53.53%,rgba(108, 61, 41, 1) 100%);
	background : -webkit-linear-gradient(-90deg, rgba(218, 150, 121, 1) 0%, rgba(204, 139, 111, 1) 18.47%, rgba(166, 108, 83, 1) 53.53%, rgba(108, 61, 41, 1) 100%);
	background : -webkit-gradient(linear,50% 0% ,50% 100% ,color-stop(0,rgba(218, 150, 121, 1) ),color-stop(0.1847,rgba(204, 139, 111, 1) ),color-stop(0.5353,rgba(166, 108, 83, 1) ),color-stop(1,rgba(108, 61, 41, 1) ));
	background : -o-linear-gradient(-90deg, rgba(218, 150, 121, 1) 0%, rgba(204, 139, 111, 1) 18.47%, rgba(166, 108, 83, 1) 53.53%, rgba(108, 61, 41, 1) 100%);
	background : -ms-linear-gradient(-90deg, rgba(218, 150, 121, 1) 0%, rgba(204, 139, 111, 1) 18.47%, rgba(166, 108, 83, 1) 53.53%, rgba(108, 61, 41, 1) 100%);
	-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr='#DA9679', endColorstr='#6C3D29' ,GradientType=0)";
	background : linear-gradient(180deg, rgba(218, 150, 121, 1) 0%, rgba(204, 139, 111, 1) 18.47%, rgba(166, 108, 83, 1) 53.53%, rgba(108, 61, 41, 1) 100%);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#DA9679',endColorstr='#6C3D29' , GradientType=0);
}

@mixin noList {
	list-style: none;
	list-style-type: none;
	padding: 0;
	margin: 0;
}
